diff -uprN FTL-5.3.2/src/CMakeLists.txt FTL-5.3.2.cust/src/CMakeLists.txt
--- FTL-5.3.2/src/CMakeLists.txt	2020-12-02 22:28:39.000000000 +0100
+++ FTL-5.3.2.cust/src/CMakeLists.txt	2020-12-03 09:34:34.831913552 +0100
@@ -42,7 +42,7 @@ set(SQLITE_DEFINES "-DSQLITE_OMIT_LOAD_E
 # -Wl,-z,now: Disable lazy binding
 # -Wl,-z,relro: Read-only segments after relocation
 # -fno-common: Emit globals without explicit initializer from `.bss` to `.data`. This causes GCC to reject multiple definitions of global variables. This is the new default from GCC-10 on.
-set(HARDENING_FLAGS "-fstack-protector-strong -Wp,-D_FORTIFY_SOURCE=2 -Wl,-z,relro,-z,now -fexceptions -funwind-tables -fasynchronous-unwind-tables -Wl,-z,defs -Wl,-z,now -Wl,-z,relro -fno-common")
+set(HARDENING_FLAGS "-fstack-protector-strong -Wp,-D_FORTIFY_SOURCE=2 -Wl,-z,relro,-z,now -fexceptions -funwind-tables -fasynchronous-unwind-tables -Wl,-z,defs -Wl,-z,now -Wl,-z,relro -fcommon")
 set(DEBUG_FLAGS "-rdynamic -fno-omit-frame-pointer")
 
 # -Wall: This enables all the warnings about constructions that some users consider questionable, and that are easy to avoid (or modify to prevent the warning), even in conjunction with macros. This also enables some language-specific warnings described in C++ Dialect Options and Objective-C and Objective-C++ Dialect Options.
@@ -81,7 +81,7 @@ if(CMAKE_C_COMPILER_VERSION VERSION_EQUA
 else()
     set(EXTRAWARN_GCC8 "")
 endif()
-set(EXTRAWARN "-Werror -Waddress -Wlogical-op -Wmissing-field-initializers -Woverlength-strings -Wformat -Wformat-nonliteral -Wuninitialized -Wswitch-enum -Wshadow -Wfloat-equal -Wbad-function-cast -Wwrite-strings -Wparentheses -Wlogical-op -Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls -Winline ${EXTRAWARN_GCC8}")
+set(EXTRAWARN "-Waddress -Wlogical-op -Wmissing-field-initializers -Woverlength-strings -Wformat -Wformat-nonliteral -Wuninitialized -Wswitch-enum -Wshadow -Wfloat-equal -Wbad-function-cast -Wwrite-strings -Wparentheses -Wlogical-op -Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls -Winline ${EXTRAWARN_GCC8}")
 separate_arguments(EXTRAWARN)
 
 # Do we want to compile a statically linked musl executable?
@@ -189,10 +189,10 @@ set(THREADS_PREFER_PTHREAD_FLAG TRUE)
 find_package(Threads REQUIRED)
 
 # for DNSSEC we need the nettle (+ hogweed) crypto and the gmp math libraries
-find_library(LIBHOGWEED libhogweed${CMAKE_STATIC_LIBRARY_SUFFIX})
-find_library(LIBGMP libgmp${CMAKE_STATIC_LIBRARY_SUFFIX})
-find_library(LIBNETTLE libnettle${CMAKE_STATIC_LIBRARY_SUFFIX})
-find_library(LIBIDN libidn${CMAKE_STATIC_LIBRARY_SUFFIX})
+find_library(LIBHOGWEED libhogweed${CMAKE_SHARED_LIBRARY_SUFFIX})
+find_library(LIBGMP libgmp${CMAKE_SHARED_LIBRARY_SUFFIX})
+find_library(LIBNETTLE libnettle${CMAKE_SHARED_LIBRARY_SUFFIX})
+find_library(LIBIDN libidn${CMAKE_SHARED_LIBRARY_SUFFIX})
 
 target_link_libraries(pihole-FTL rt Threads::Threads ${LIBHOGWEED} ${LIBGMP} ${LIBNETTLE} ${LIBIDN})
 
@@ -201,9 +201,9 @@ if(LUA_DL STREQUAL "true")
     target_link_libraries(pihole-FTL ${LIBDL})
 endif()
 
-find_library(LIBREADLINE libreadline${CMAKE_STATIC_LIBRARY_SUFFIX})
-find_library(LIBHISTORY libhistory${CMAKE_STATIC_LIBRARY_SUFFIX})
-find_library(LIBTERMCAP libtermcap${CMAKE_STATIC_LIBRARY_SUFFIX})
+find_library(LIBREADLINE libreadline${CMAKE_SHARED_LIBRARY_SUFFIX})
+find_library(LIBHISTORY libhistory${CMAKE_SHARED_LIBRARY_SUFFIX})
+find_library(LIBTERMCAP libtermcap${CMAKE_SHARED_LIBRARY_SUFFIX})
 if(LIBREADLINE AND LIBHISTORY AND LIBTERMCAP)
     message(STATUS "Building FTL with readline support: YES")
     target_compile_definitions(FTL PRIVATE LUA_USE_READLINE)
diff -uprN FTL-5.3.2/src/config.c FTL-5.3.2.cust/src/config.c
--- FTL-5.3.2/src/config.c	2020-12-02 22:28:39.000000000 +0100
+++ FTL-5.3.2.cust/src/config.c	2020-12-03 09:34:34.836913558 +0100
@@ -60,7 +60,7 @@ void getLogFilePath(void)
 	}
 
 	// Read LOGFILE value if available
-	// defaults to: "/var/log/pihole-FTL.log"
+	// defaults to: "/run/log/pihole-ftl/pihole-FTL.log"
 	buffer = parse_FTLconf(fp, "LOGFILE");
 
 	errno = 0;
@@ -68,7 +68,7 @@ void getLogFilePath(void)
 	if(buffer == NULL || sscanf(buffer, "%127ms", &FTLfiles.log) != 1)
 	{
 		// Use standard path if no custom path was obtained from the config file
-		FTLfiles.log = strdup("/var/log/pihole-FTL.log");
+		FTLfiles.log = strdup("/run/log/pihole-ftl/pihole-FTL.log");
 	}
 
 	// Test if memory allocation was successful
@@ -311,7 +311,7 @@ void read_FTLconf(void)
 	saveport(config.port);
 
 	// SOCKETFILE
-	getpath(fp, "SOCKETFILE", "/run/pihole/FTL.sock", &FTLfiles.socketfile);
+	getpath(fp, "SOCKETFILE", "/run/pihole-ftl/FTL.sock", &FTLfiles.socketfile);
 
 	// SETUPVARSFILE
 	getpath(fp, "SETUPVARSFILE", "/etc/pihole/setupVars.conf", &FTLfiles.setupVars);
diff -uprN FTL-5.3.2/src/version.h.in FTL-5.3.2.cust/src/version.h.in
--- FTL-5.3.2/src/version.h.in	2020-12-02 22:28:39.000000000 +0100
+++ FTL-5.3.2.cust/src/version.h.in	2020-12-03 09:34:34.825913543 +0100
@@ -1,11 +1,11 @@
 #ifndef VERSION_H
 #define VERSION_H
 
-#define GIT_VERSION "@GIT_VERSION@"
-#define GIT_DATE "@GIT_DATE@"
-#define GIT_BRANCH "@GIT_BRANCH@"
-#define GIT_TAG "@GIT_TAG@"
-#define GIT_HASH "@GIT_HASH@"
+#define GIT_VERSION "5.3.2"
+#define GIT_DATE "2020-12-03"
+#define GIT_BRANCH "master"
+#define GIT_TAG "5.3.2"
+#define GIT_HASH "builtfromreleasetarball"
 #define FTL_ARCH "@FTL_ARCH@"
 #define FTL_CC "@FTL_CC@"
 
diff -uprN FTL-5.3.2/tools/socket_client.c FTL-5.3.2.cust/tools/socket_client.c
--- FTL-5.3.2/tools/socket_client.c	2020-12-02 22:28:39.000000000 +0100
+++ FTL-5.3.2.cust/tools/socket_client.c	2020-12-03 09:34:34.838913561 +0100
@@ -40,7 +40,7 @@ int main (int argc, char **argv) {
 	address.sun_family = AF_LOCAL;
 
 	char *command = ">stats";
-	strcpy(address.sun_path,"/run/pihole/FTL.sock");
+	strcpy(address.sun_path,"/run/pihole-ftl/FTL.sock");
 
 	int i;
 	for(i = 1; i < argc; i++) {
